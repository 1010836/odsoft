-- @path MM=/PL6/models/pl4.ecore
-- @path MM1=/PL6/models/Diagram.ecore

module pl6;
create OUT : MM1 from IN : MM;

-- A counter for Requirement ID 
helper def: contIdR: Integer = 1;

-- A counter for RequirentGroup ID 
helper def: contIdRG: Integer = 0;

helper context Integer def: inc(): Integer = self + 1;

-- Requirement 1
rule Map2Model { 
	from 
		m1: MM!"Map"
	to 
		m2: MM1!Model (
			title <- m1.title,
			groups <- m1.rootTopics
		)
}

-- Requirement 2
rule rootTopic2RequirentGroup {
	from
		t: MM!Topic (
			t.parent.oclIsUndefined()
		)
	to	
		rg: MM1!RequirentGroup (
			name <- t.description,
			description <- t.description,
			children <- t.subtopics->select(x | x.subtopics->notEmpty()), -- RequirentGroups
			requirements <- t.subtopics->select(y | y.subtopics->isEmpty())  -- Requirements
		)
	do { 
		thisModule.contIdRG <- thisModule.contIdRG.inc(); 
		rg.id <- 'G0' + thisModule.contIdRG; 
	}
}

--Requirement 3 (falta adicionar o Requirement ao seu RequirentGroup)
rule Topic2Requirement { 
	from 
		s: MM!Topic (s.subtopics->isEmpty() and not s.parent.oclIsUndefined()) 
	to 
		t: MM1!Requirement (
			title <- s.description, 
			description <- s.description, 			
			version <- version
		), version: MM1!Version (
			major <- 1,
			minor <- 1,
			service <- 1 
		)
	do { 
		thisModule.contIdR <- thisModule.contIdR.inc(); 
		t.id <- 'R0' + thisModule.contIdR; 
	}
}

-- Requirement 4
rule otherTopics2RequirentGroup {
	from
		s: MM!Topic (s.subtopics->notEmpty() and not s.parent.oclIsUndefined())
	to
		t: MM1!RequirentGroup (
			description <- s.description,
			name <- s.description,
			parent <- s.parent,
			requirements <- s.subtopics->select(y | y.subtopics->isEmpty())  -- Requirements
	)
	do { 
		thisModule.contIdRG <- thisModule.contIdRG.inc(); 
		t.id <- t.parent.id + '-' + thisModule.contIdRG; 
	}
}
